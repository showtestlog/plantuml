
@startuml  Flutter_Render
!include  https://gist.githubusercontent.com/showtestlog/ef21b2bb88a18530ea70dbdbc9cb7ad0/raw/0fd3b5fe665c79a4f364005f41e47078fda87673/.puml

box framework

participant _RawReceivePortImpl
participant _Timer
participant WidgetsBinding 
participant RenderObjectToWidgetAdapter
participant RenderObjectToWidgetElement
note left of RenderObjectToWidgetElement  #aqua
继承Element,持有Elemnet类型作为_child
endnote
participant RootRenderObjectElement
participant BuildOwner
note left of BuildOwner  #aqua
管理widget调用
end note
note left of WidgetsBinding #aqua
glue between 
the widgets layer and 
the Flutter engine.   
单例
end note 

participant ComponentElement
endbox
box USER
participant Element
participant Widget
participant StatelessElement
participant StatefulElement
participant StatelessWidget
participant SingleChildRenderObjectElement

endbox


==Render==
note left: native call
->_RawReceivePortImpl:handleMessage
_RawReceivePortImpl -> _Timer:handleMessage
activate _Timer
group 定时器调用
_Timer->_Timer:runTimers
_Timer->_Timer:callback
end 

_Timer->WidgetsBinding:scheduleAttachRootWidget
WidgetsBinding --> RenderObjectToWidgetAdapter:RenderObjectToWidgetAdapter()
activate RenderObjectToWidgetAdapter
RenderObjectToWidgetAdapter->RenderObjectToWidgetAdapter:attachToRenderTree
RenderObjectToWidgetAdapter->BuildOwner:lockState
BuildOwner-->RenderObjectToWidgetAdapter:createElement
RenderObjectToWidgetAdapter->RenderObjectToWidgetElement:assginOwner
RenderObjectToWidgetAdapter->BuildOwner:buildScope
note left:构建所有被[scheduleBuildFor]标记为脏的元素。
BuildOwner->RenderObjectToWidgetElement:mount
activate RenderObjectToWidgetElement
RenderObjectToWidgetElement->RootRenderObjectElement:mount
RootRenderObjectElement -> Element:mount
RenderObjectToWidgetElement->RenderObjectToWidgetElement:_rebuild
RenderObjectToWidgetElement->Element:updateChild
Element->Element:inflateWidget
Element->ComponentElement:mount
ComponentElement->ComponentElement:_firstBuild
ComponentElement->Element:rebuild
Element->ComponentElement:performRebuild
activate ComponentElement
ComponentElement->StatelessElement:build
StatelessElement->StatelessWidget:build
ComponentElement->Element:updateChild
Element->Element:inflateWidget


Element->ComponentElement:mount
ComponentElement->StatefulElement:_firstBuild
StatefulElement->ComponentElement:_firstBuild
ComponentElement-> Element:rebuild
Element->StatefulElement:performRebuild
StatefulElement->ComponentElement:performRebuild
ComponentElement->Element:updateChild
activate Element
Element->Element:inflateWidget
Element-> SingleChildRenderObjectElement:mount
deactivate
SingleChildRenderObjectElement--> Element:updateChild
rnote right
child为null,递归树返回
endnote
deactivate ComponentElement



deactivate
deactivate

@enduml

@startuml

!include  https://gist.githubusercontent.com/showtestlog/ef21b2bb88a18530ea70dbdbc9cb7ad0/raw/0fd3b5fe665c79a4f364005f41e47078fda87673/.puml

box glue component 
participant BindingBase
participant ServicesBinding
participant SchedulerBinding
participant GestureBinding
participant RendererBinding
rnote left of RendererBinding
RenderView:根renderObject,配合PipelineOwner渲染
endnote
participant SemanticsBinding 

participant PipelineOwner

@enduml


@startuml UpdateChild
start 

!include https://raw.githubusercontent.com/future-architect/puml-themes/master/themes/puml-theme-toy.puml

:"更新(参数：child, widget, slot)";

if (child存在) then (true)
    if (child.widget == newWidget) then (true)
        if (child.slot != newSlot) then (true)
            :updateSlotForChild(child, newSlot);
        endif 
    else if (Widget.canUpdatechild(widget, newWidget)) then(true)
            if (child.slot != newSlot) then (true)
                :"updateSlotForChild(child, newSlot)";
            endif
        :child.update(newWidget);
    endif
    :newChild = child;
else (false)
    :deactivateChild;
    :newChild = inflateWidget(newWidget, newSlot);
endif
stop
@enduml



